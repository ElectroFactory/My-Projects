# -*- coding: utf-8 -*-
"""2025 Lane Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BdkF_GO0gI5kUKVO1ezGKRwQJsLAu8EK
"""

!pip install pandas prophet openpyxl matplotlib

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
from openpyxl import Workbook, load_workbook
from openpyxl.drawing.image import Image as XLImage
from google.colab import files


uploaded = files.upload()

file_name = '/content/forecasted_dry_van_rates (13).xlsx'
df = pd.read_excel(file_name, sheet_name='forecast 2025 values')

df['Date'] = pd.to_datetime(df['Date'])
df = df.rename(columns={'Date': 'ds', 'Actual Dry Van Linehaul': 'y'})
train_data = df.dropna(subset=['y'])

model = Prophet(yearly_seasonality=True)
model.fit(train_data)

# Create future dates
future_dates = pd.date_range(start="2025-06-01", end="2025-12-28", freq="W")
future_df = pd.DataFrame(future_dates, columns=['ds'])

forecast = model.predict(future_df)

# Save forecast plot
plt.figure(figsize=(10, 6))
model.plot(forecast)
plt.title('Dry Van Linehaul Rate Forecast')
plt.xlabel('Date')
plt.ylabel('Dry Van Linehaul Rate')
plt.tight_layout()
forecast_plot_path = '/content/forecast_plot.png'
plt.savefig(forecast_plot_path)
plt.close()

# Save component (seasonality) plot
fig2 = model.plot_components(forecast)
plt.tight_layout()
components_plot_path = '/content/components_plot.png'
fig2.savefig(components_plot_path)
plt.close()

# Combine forecast with original data, including prediction bands
forecasted_values = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].rename(columns={
    'yhat': 'RATE_TOTAL_EST_MEAN',
    'yhat_lower': 'LOWER_BAND',
    'yhat_upper': 'UPPER_BAND'
})

forecasted_values['Dry Van Linehaul Rates'] = forecasted_values['RATE_TOTAL_EST_MEAN'].round(2)
forecasted_values['LOWER_BAND'] = forecasted_values['LOWER_BAND'].round(2)
forecasted_values['UPPER_BAND'] = forecasted_values['UPPER_BAND'].round(2)

# Merge historical and forecasted data
df_with_forecast = pd.concat([df, forecasted_values], ignore_index=True)

# Save data to Excel file
excel_output_path = '/content/forecasted_dry_van_rates_with_bands.xlsx'
df_with_forecast.to_excel(excel_output_path, index=False)

wb = load_workbook(excel_output_path)
ws = wb.create_sheet(title='Forecast Plots')

# forecast plot
img1 = XLImage(forecast_plot_path)
img1.anchor = 'A1'
ws.add_image(img1)

# components plot
img2 = XLImage(components_plot_path)
img2.anchor = 'A30'
ws.add_image(img2)

wb.save(excel_output_path)

files.download(excel_output_path)

!pip install pandas prophet openpyxl plotly

import pandas as pd
from prophet import Prophet
import plotly.graph_objs as go
from datetime import datetime
from google.colab import files

# Upload your file
uploaded = files.upload()

# Load the Excel data
file_name = '/content/forecasted_dry_van_rates (13).xlsx'
df = pd.read_excel(file_name, sheet_name='forecast 2025 values')

# Prepare data for Prophet
df['Date'] = pd.to_datetime(df['Date'])
df = df.rename(columns={'Date': 'ds', 'Actual Dry Van Linehaul': 'y'})

# Filter actual data from June 1, 2023 (historical data)
start_actuals_date = pd.to_datetime("2023-06-01")
train_data = df[df['ds'] >= start_actuals_date].dropna(subset=['y'])

# Fit the Prophet model on historical data
model = Prophet(yearly_seasonality=True)
model.fit(train_data)

# Generate future dates starting today for 6 months forecast
start_forecast_date = pd.to_datetime(datetime.today().date())
end_forecast_date = start_forecast_date + pd.DateOffset(months=6)
future_dates = pd.date_range(start=start_forecast_date, end=end_forecast_date, freq='W')
future_df = pd.DataFrame(future_dates, columns=['ds'])

# Make forecast
forecast = model.predict(future_df)

# Customize spread logic: dynamic Â± band growing over time (in cents)
spread_cents = [min(3 + i * 3, 18) for i in range(len(forecast))]  # 3, 6, 9, ..., 18
spread_dollars = [x / 100 for x in spread_cents]  # convert to dollars

# Apply caps ONLY to forecasted values, NOT to actual historical data
lower_cap = 1.62
upper_cap = 2.12

forecast['yhat'] = forecast['yhat'].clip(lower=lower_cap, upper=upper_cap)
forecast['LOWER_BAND'] = (forecast['yhat'] - spread_dollars).clip(lower=lower_cap)
forecast['UPPER_BAND'] = (forecast['yhat'] + spread_dollars).clip(upper=upper_cap)

# Rename columns and round forecasted results
forecasted_values = forecast[['ds', 'yhat', 'LOWER_BAND', 'UPPER_BAND']].rename(columns={
    'yhat': 'RATE_TOTAL_EST_MEAN'
})
forecasted_values['Dry Van Linehaul Rates'] = forecasted_values['RATE_TOTAL_EST_MEAN'].round(2)
forecasted_values['LOWER_BAND'] = forecasted_values['LOWER_BAND'].round(2)
forecasted_values['UPPER_BAND'] = forecasted_values['UPPER_BAND'].round(2)

# Combine historical and forecasted data without altering actual historical values
df_with_forecast = pd.concat([df, forecasted_values], ignore_index=True)

# Create Plotly interactive chart
trace_actual = go.Scatter(
    x=train_data['ds'], y=train_data['y'],
    mode='lines+markers',
    name='Actual',
    line=dict(color='blue')
)

trace_forecast = go.Scatter(
    x=forecasted_values['ds'], y=forecasted_values['RATE_TOTAL_EST_MEAN'],
    mode='lines',
    name='Forecast',
    line=dict(color='black', dash='solid')
)

trace_upper = go.Scatter(
    x=forecasted_values['ds'], y=forecasted_values['UPPER_BAND'],
    mode='lines',
    name='Upper Band',
    line=dict(color='lightgray'),
    showlegend=False
)

trace_lower = go.Scatter(
    x=forecasted_values['ds'], y=forecasted_values['LOWER_BAND'],
    mode='lines',
    name='Lower Band',
    line=dict(color='lightgray'),
    fill='tonexty',
    fillcolor='rgba(0,0,0,0.1)',
    showlegend=False
)

layout = go.Layout(
    title='Interactive Dry Van Linehaul Rate Forecast',
    xaxis=dict(title='Date'),
    yaxis=dict(title='Rate ($/mile)', range=[1.10, 2.15]),
    hovermode='x unified',
    template='plotly_white'
)

fig = go.Figure(data=[trace_actual, trace_forecast, trace_upper, trace_lower], layout=layout)
fig.show()

# Save interactive chart as HTML
html_path = "interactive_forecast.html"
fig.write_html(html_path)
files.download(html_path)

!pip install pandas prophet openpyxl matplotlib

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
from openpyxl import load_workbook
from openpyxl.drawing.image import Image as XLImage
from google.colab import files
import numpy as np

# Upload Excel file
uploaded = files.upload()

file_name = list(uploaded.keys())[0]
df = pd.read_excel(file_name, sheet_name='forecast 2025 values')

df['Date'] = pd.to_datetime(df['Date'])
df = df.rename(columns={'Date': 'ds', 'Actual Dry Van Linehaul': 'y'})
train_data = df.dropna(subset=['y'])

# --- COVID data filtering: exclude 2020-2022 to avoid skewing ---
train_data = train_data[~train_data['ds'].between('2020-01-01', '2022-12-31')]

# Exaggerate seasonality
model = Prophet()
model.fit(train_data)

# Create future dates for prediction
future_dates = pd.date_range(start="2025-06-01", end="2025-12-28", freq="W")
future_df = pd.DataFrame(future_dates, columns=['ds'])

forecast = model.predict(future_df)

# Custom bounds parameters
min_lower_bound = 1.62
max_upper_bound = 2.12

# Define spread behavior
base_spread = 0.03  # 3 cents at forecast start
max_spread = 0.09   # max 9 cents at farthest forecast point

# Calculate days from last training date for each forecast row
last_train_date = train_data['ds'].max()
forecast['days_from_last_train'] = (forecast['ds'] - last_train_date).dt.days.clip(lower=0)

max_days = forecast['days_from_last_train'].max()

# Linear increase of spread from base to max spread over forecast horizon
forecast['dynamic_spread'] = base_spread + (max_spread - base_spread) * (forecast['days_from_last_train'] / max_days)

# Calculate dynamic bounds with clipping to min and max allowed bounds
forecast['lower_bound_dynamic'] = (forecast['yhat'] - forecast['dynamic_spread']).clip(lower=min_lower_bound)
forecast['upper_bound_dynamic'] = (forecast['yhat'] + forecast['dynamic_spread']).clip(upper=max_upper_bound)

# Prepare output with dynamic bounds
forecasted_values = forecast[['ds', 'yhat']].rename(columns={'yhat': 'RATE_TOTAL_EST_MEAN'})
forecasted_values['LOWER_BAND'] = forecast['lower_bound_dynamic'].round(2)
forecasted_values['UPPER_BAND'] = forecast['upper_bound_dynamic'].round(2)
forecasted_values['Dry Van Linehaul Rates'] = forecasted_values['RATE_TOTAL_EST_MEAN'].round(2)

# Merge historical and forecasted data
df_with_forecast = pd.concat([df, forecasted_values], ignore_index=True)

# Plot forecast with x-axis limit starting from 2023-06-01
plt.figure(figsize=(10, 6))
fig = model.plot(forecast)
ax = fig.gca()
start_date = pd.to_datetime("2023-06-01")
ax.set_xlim(left=start_date)
plt.title('Dry Van Linehaul Rate Forecast')
plt.xlabel('Date')
plt.ylabel('Dry Van Linehaul Rate')
plt.tight_layout()

forecast_plot_path = '/content/forecast_plot.png'
plt.savefig(forecast_plot_path)
plt.close()

# Save component (seasonality) plot
fig2 = model.plot_components(forecast)
plt.tight_layout()
components_plot_path = '/content/components_plot.png'
fig2.savefig(components_plot_path)
plt.close()

# Save to Excel with plots
excel_output_path = '/content/forecasted_dry_van_rates_with_dynamic_bands.xlsx'
df_with_forecast.to_excel(excel_output_path, index=False)

wb = load_workbook(excel_output_path)
ws = wb.create_sheet(title='Forecast Plots')

# Add forecast plot image
img1 = XLImage(forecast_plot_path)
img1.anchor = 'A1'
ws.add_image(img1)

# Add components plot image
img2 = XLImage(components_plot_path)
img2.anchor = 'A30'
ws.add_image(img2)

wb.save(excel_output_path)

files.download(excel_output_path)